- alias: "Take Motion Snapshots"
  initial_state: false
  trigger:
    platform: state
    entity_id: binary_sensor.motion_sensor
    to: "on"
  action:
    - service: script.turn_on
      entity_id: script.security_camera_create_snapshot
- alias: "Switch On Living Room Lamp if Motion is Detected"
  # only at night though
  initial_state: false
  trigger:
    platform: state
    entity_id: binary_sensor.motion_sensor
    to: "on"
  condition:
    # use or, because, you can't be after sunset AND before sunrise ON THE SAME DAY
    - condition: or
      conditions:
        - condition: sun
          after: sunset
          after_offset: "-02:00:00"
        - condition: sun
          before: sunrise
          before_offset: "-00:30:00"
  action:
    - service: switch.turn_on
      entity_id: switch.living_room_lamp
    - service: timer.start
      data:
        entity_id: timer.motion_timer
- alias: "Switch Off Living Room Lamp When Timer Expires"
  initial_state: true
  trigger:
    platform: event
    event_type: timer.finished
    event_data:
      entity_id: timer.motion_timer
  action:
    - service: switch.turn_off
      entity_id: switch.living_room_lamp
- alias: "Motion Indicator On"
  initial_state: true
  trigger:
    platform: state
    entity_id: binary_sensor.motion_sensor
    to: "on"
  action:
    - service: switch.turn_on
      entity_id: switch.motion_led
- alias: "Motion Indicator Off"
  initial_state: true
  trigger:
    platform: state
    entity_id: binary_sensor.motion_sensor
    to: "off"
  action:
    - service: switch.turn_off
      entity_id: switch.motion_led
- alias: "Living Room Lamp Auto On Upon Sunset or Arrival"
  initial_state: true
  trigger:
    - platform: sun
      event: sunset
      offset: "-01:00:00"
    - platform: state
      entity_id: binary_sensor.anybody_home
      to: "on"
  condition:
    - condition: state
      entity_id: binary_sensor.anybody_home
      state: "on"
    # use or, because, you can't be after sunset AND before sunrise ON THE SAME DAY
    - condition: or
      conditions:
        - condition: sun
          after: sunset
          after_offset: "-01:00:00"
        - condition: sun
          before: sunrise
          before_offset: "-01:00:00"
  action:
    - service: switch.turn_on
      entity_id: switch.living_room_lamp
- alias: "Bedlamps Auto On Upon Sunset or Arrival"
  initial_state: true
  trigger:
    - platform: sun
      event: sunset
      offset: "-00:30:00"
    - platform: state
      entity_id: binary_sensor.anybody_home
      to: "on"
  condition:
    - condition: state
      entity_id: binary_sensor.anybody_home
      state: "on"
    # use or, because, you can't be after sunset AND before sunrise ON THE SAME DAY
    - condition: or
      conditions:
        - condition: sun
          after: sunset
          after_offset: "-00:30:00"
        - condition: sun
          before: sunrise
  action:
    - service: homeassistant.turn_on
      entity_id: group.main_bedroom
- alias: "Lights Off After Sunrise"
  # todo: later when cloudy
  # and switch on earlier when cloudy
  initial_state: true
  trigger:
    - platform: sun
      event: sunrise
      offset: "01:00:00"
  condition:
    - condition: sun
      after: sunrise
      after_offset: "01:00:00"
  action:
    - service: homeassistant.turn_off
      entity_id: group.main_bedroom
    - service: switch.turn_off
      entity_id: switch.living_room_lamp
- alias: "Away Mode"
  initial_state: true
  trigger:
    platform: state
    entity_id: binary_sensor.anybody_home
    to: "off"
  condition:
    - condition: state
      entity_id: binary_sensor.anybody_home
      state: "off"
  action:
    - service: light.turn_off
      entity_id: all
    - service: automation.turn_on
      entity_id: automation.take_motion_snapshots
    - service: automation.turn_on
      entity_id: automation.switch_on_living_room_lamp_if_motion_is_detected
- alias: "Home Mode"
  trigger:
    platform: state
    entity_id: binary_sensor.anybody_home
    to: "on"
  condition:
    - condition: state
      entity_id: binary_sensor.anybody_home
      state: "on"
  action:
    - service: automation.turn_off
      entity_id: automation.take_motion_snapshots
    - service: automation.turn_off
      entity_id: automation.switch_on_living_room_lamp_if_motion_is_detected
- alias: "Open The Gate When Arriving Home"
  trigger:
    - platform: state
      entity_id: binary_sensor.pieter_present
      to: "on"
  condition:
    - condition: and
      conditions:
        - condition: state
          entity_id: cover.main_gate
          state: "closed"
        - condition: time
          after: "07:00:00"
          before: "22:00:00"
  action:
    - service: cover.open_cover
      entity_id: cover.main_gate
- alias: "Check Disk Space on the Home Assistant server"
  trigger:
    - platform: time_pattern
      hours: "*"
      minutes: 0
      seconds: 0
  condition:
    - condition: numeric_state
      entity_id: sensor.disk_use_percent
      above: 90
  action:
    - service: notify.mobile_app_ceres
      data_template:
        title: "System"
        message: "Server disk usage is exceeding {{ trigger.above }}%!"
- alias: "Contractor Mode Enabled Alert"
  trigger: 
    - platform: state
      entity_id: switch.contractor_mode
      to: "on"
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "Special Mode"
        message: "Contractor mode enabled."
        data:
          push:
            category: "contractor_mode_enabled"
- alias: "Contractor Mode Disabled Alert"
  trigger: 
    - platform: state
      entity_id: switch.contractor_mode
      to: "off"
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "Special Mode"
        message: "Contractor mode disabled."
        data:
          push:
            category: "contractor_mode_disabled"
- alias: "Enable Contractor Mode"
  trigger:
    - platform: time
      at: "07:00:00"
  condition:
    - condition: time
      after: "07:00:00"
      weekday:
        - wed
  action:
    - service: switch.turn_on
      entity_id: switch.contractor_mode
- alias: "Disable Contractor Mode"
  trigger:
    - platform: time
      at: "16:00:00"
  condition:
    - condition: time
      after: "16:00:00"
      weekday:
        - wed
  action:
    - service: switch.turn_off
      entity_id: switch.contractor_mode
- alias: "Contractor Mode Still Enabled Alert"
  trigger:
    - platform: time_pattern
      hours: "*"
      minutes: 0
      seconds: 0
  condition:
    - condition: and
      conditions:
        - condition: state
          entity_id: switch.contractor_mode
          state: "on"
        - condition: time
          after: "17:00:00"
          before: "21:00:00"
  action:
    - service: notify.mobile_app_ceres
      data:
        title: "Special Mode"
        message: "Contractor mode is still enabled."
        data:
          push:
            category: "contractor_mode_still_enabled_alert"
- alias: "Disable Contractor Mode From Alert Action"
  trigger:
    - platform: event
      event_type: ios.notification_action_fired
      event_data:
        actionName: DISABLE_CONTRACTOR_MODE
  action:
    - service: switch.turn_off
      entity_id: switch.contractor_mode
- alias: "Enable Contractor Mode From Alert Action"
  trigger:
    - platform: event
      event_type: ios.notification_action_fired
      event_data:
        actionName: ENABLE_CONTRACTOR_MODE
  action:
    - service: switch.turn_on
      entity_id: switch.contractor_mode  
- alias: "Shellies Announce"
  trigger:
    - platform: homeassistant
      event: start
  action:
    service: mqtt.publish
    data:
      topic: shellies/command
      payload: announce
- alias: "Shellies Discovery"
  trigger:
    - platform: mqtt
      topic: shellies/announce
  action:
    service: python_script.shellies_discovery
    data_template:
      id: '{{ trigger.payload_json.id }}'
      mac: '{{ trigger.payload_json.mac }}'
      fw_ver: '{{ trigger.payload_json.fw_ver }}'
# https://community.home-assistant.io/t/snmp-bandwidth-monitor/7122
- alias: "Monitor Inbound Internet Traffic"
  trigger:
    platform: state
    entity_id: sensor.snmp_wan_in
  action:
    - service: input_number.set_value
      data_template:
        entity_id: input_number.wan_traffic_delta_in
        value: '{{ ((trigger.to_state.state | int - trigger.from_state.state | int) * 8 ) / ( as_timestamp(trigger.to_state.last_updated) - as_timestamp(trigger.from_state.last_updated) ) }}'
- alias: "Monitor Outbound Internet Traffic"
  trigger:
    platform: state
    entity_id: sensor.snmp_wan_out
  action:
    - service: input_number.set_value
      data_template:
        entity_id: input_number.wan_traffic_delta_out
        value: '{{ ((trigger.to_state.state | int - trigger.from_state.state | int) * 8 ) / ( as_timestamp(trigger.to_state.last_updated) - as_timestamp(trigger.from_state.last_updated) ) }}'
- alias: "Notify Pieter Going Home from Work in Cape Town"
  trigger:
    platform: zone
    entity_id: person.pieter_rautenbach
    zone: zone.pieter_work_cape_town
    event: leave
  condition:
    - condition: time
      after: "16:00:00"
      weekday:
        - mon
        - tue
        - wed
        - thu
        - fri
  action:
    - service: script.turn_on
      entity_id: script.send_pieter_work_cape_town_to_home_eta
- alias: "Start Cover Timer When Opened"
  initial_state: true
  trigger:
    platform: state
    entity_id: 
      - cover.main_gate
      - cover.lhs_garage_door
      - cover.rhs_garage_door
    to: "open"
  action:
    - service: timer.start
      data_template:
        entity_id: "timer.{{ trigger.entity_id | replace('cover.', '') }}_timer"
        duration: "00:03:00"
- alias: "Cover Left Open Alert"
  initial_state: true
  trigger:
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.main_gate_timer
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.lhs_garage_door_timer
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.rhs_garage_door_timer
  condition:
    - condition: or
      conditions:
        - condition: state
          entity_id: cover.main_gate
          state: "open"
        - condition: state
          entity_id: cover.lhs_garage_door
          state: "open"
        - condition: state
          entity_id: cover.rhs_garage_door
          state: "open"
  action:
    # https://companion.home-assistant.io/docs/notifications/critical-notifications/
    - service: notify.mobile_app_ceres
      data_template:
        title: "Security"
        # timer.rhs_garage_door_timer -> Pieter's garage door
        message: >-
          {% set message_part = " has been left open for too long." %}
          {% set name = None %}
          {% if trigger.event.data.entity_id | regex_search("lhs", ignorecase=True) %}
            {% set name = "Rouvé's garage door" %}
          {% elif trigger.event.data.entity_id | regex_search("rhs", ignorecase=True) %}
            {% set name = "Pieter's garage door" %}
          {% else %}
            {% set name = "The main gate" %}
          {% endif %}
          {{ name }}{{ message_part }}
        data:
          # todo: threading and replacing notifications
          # https://github.com/home-assistant/iOS/issues/579
          # https://github.com/home-assistant/iOS/issues/215
          # https://companion.home-assistant.io/docs/notifications/notifications-basic (to clear and/or replace; note the quotes around 'apns-collapse-id')
          # https://developer.apple.com/documentation/usernotifications/unnotificationrequest/1649634-identifier
          push:
            category: "cover_open"
          action_data:
            # convert this to the cover entity to use in the automation that receives this
            cover_id: "{{ trigger.event.data.entity_id | replace('_timer', '') | replace('timer', 'cover') }}"
            timer_id: "{{ trigger.event.data.entity_id }}"
    - service: timer.start
      data_template:
        entity_id: "{{ trigger.event.data.entity_id }}"
- alias: "Close Cover From Alert Action"
  trigger:
    - platform: event
      event_type: ios.notification_action_fired
      event_data:
        actionName: CLOSE_COVER
  action:
    - service: cover.close_cover
      data_template:
        entity_id: "{{ trigger.event.data.action_data.cover_id }}"
- alias: "Extend Cover Timeout From Alert Action"
  trigger:
    - platform: event
      event_type: ios.notification_action_fired
      event_data:
        actionName: EXTEND_COVER_TIMEOUT_05_MIN
    - platform: event
      event_type: ios.notification_action_fired
      event_data:
        actionName: EXTEND_COVER_TIMEOUT_10_MIN
  action:
    - service: timer.start
      data_template:
        entity_id: "{{ trigger.event.data.action_data.timer_id }}"
        # in seconds
        duration: "{{ trigger.event.data.actionName | regex_findall_index(find='\\d+', index=0, ignorecase=False) | int * 60 }}"
- alias: "Stop Cover Timer When Closed"
  initial_state: true
  trigger:
    platform: state
    entity_id:
      - cover.main_gate
      - cover.lhs_garage_door
      - cover.rhs_garage_door
    to: "closed"
  action:
    - service: timer.cancel
      data_template:
        entity_id: "{{ trigger.entity_id | replace('cover', 'timer') }}_timer"
- alias: "Notify If Server Load High"
  initial_state: true
  trigger:
    platform: numeric_state
    entity_id: sensor.load_15m
    above: 1
    for: 
      minutes: 10
  action:
    - service: notify.mobile_app_ceres
      data_template:
        title: "System"
        # https://community.home-assistant.io/t/convert-trigger-for-into-a-relative-age/196979
        message: "The server load has been {{ states('sensor.load_15m') }} for {{ trigger.for.seconds / 60 }} minutes."
- alias: "Set Pieter's Driving State"
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.pieter_activity_type
      to: "Automotive"  # from anything else
    - platform: state
      entity_id: sensor.pieter_activity_type
      from: "Automotive"  # to anything else
  action:
    - service_template: "input_boolean.turn_{{ 'on' if states('sensor.pieter_activity_type') == 'Automotive' else 'off'}}"
      entity_id: input_boolean.pieter_driving
- alias: "Notify If Driving State Changed"
  initial_state: false
  trigger:
    platform: state
    entity_id: binary_sensor.pieter_driving
  action:
    - service: notify.mobile_app_ceres
      data_template:
        title: "Test"
        # message: "Pieter is{% if states('binary_sensor.pieter_driving') == 'off' %} not{% endif %} driving."
        message: "Pieter is{{ ' not' if states('binary_sensor.pieter_driving') == 'off' }} driving."
# open garage door when arriving home:
# when moving above a certain (last) speed (so i'm driving, not cycling or otherwise, or getting transported in some other way)
#   - the above now done with an ios activity sensor
# and connected to my car's bluetooth (thus, open my garage door only for my car)
#   - because ios prompts you to run the automation to set the input boolean, it's not useful; installing ultrasonic sensors to track which door to open
#   - check for one or both to open (edge case)
# and rouve/someone is home (proxy for the alarm being off)
# https://www.home-assistant.io/integrations/proximity/
# https://www.home-assistant.io/docs/configuration/templating/ (distance function)
# https://companion.home-assistant.io/docs/core/sensors/
